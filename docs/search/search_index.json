{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"yoyo-indexima \u00b6 Versions following Semantic Versioning Overview \u00b6 Indexima migration schema based on yoyo and pyhive . The little story In the land of database migration tool, i have tried: flyway liquidbase with hive extention Both either did not support hive (as flyway), or indexima did not fully compliant with hive (wich cause probleme with liquidbase) So I try to found a module not too complex in order to migrate our indexima schema in a safe way. In this early release, I just trying to do the job. Setup \u00b6 Requirements \u00b6 Python 3.7+ Installation \u00b6 Install this library directly into an activated virtual environment: $ pip install yoyo-indexima or add it to your Poetry project: $ poetry add yoyo-indexima Usage \u00b6 Hive connection \u00b6 backend ui must start with indexima:// If you have trouble to obtain an hive connection, please read http://dwgeek.com/guide-connecting-hiveserver2-using-python-pyhive.html/ Note: If you using python in docker, you should install : apt-get update -qq apt-get install -qqy gcc libsasl2-dev libsasl2-2 libsasl2-modules-gssapi-mit Migration \u00b6 You could see a complete sample under 'example' folder. using python client \u00b6 yoyo_indexima usage: yoyo_indexima [-h] [-s SOURCE] -u URI {show,apply} example: yoyo_indexima apply -s $(pwd)/example/migrations/ -u \"indexima://admin:super_password@localhost:10000/default\" Commands: show Show migrations apply Apply migrations reapply Reapply migrations rollback Rollback migrations mark Mark migrations as applied, without running them unmark Unmark applied migrations, without rolling them back break-lock Break migration locks Help for apply: > yoyo_indexima apply -h usage: yoyo_indexima apply [ -h ] [ -s SOURCE ] -u URI [ -f ] [ -a ] [ -r REVISION ] [ -d ] optional arguments: -h, --help show this help message and exit -s SOURCE, --source SOURCE source path of migration script ( default ./migrations ) -u URI, --uri URI backend uri -f, --force Force apply/rollback of steps even if previous steps have failed -a, --all Select all migrations, regardless of whether they have been previously applied -r REVISION, --revision REVISION Apply/rollback migration with id REVISION -d, --dry-run Dry run: no modification will be applied within python code \u00b6 If your migrations script are under directory migration folder import os from yoyo_indexima import get_backend , read_migrations if __name__ == \"__main__\" : # obtain IndeximaBackend backend = get_backend ( 'indexima://admin:super_password@localhost:10000/default?auth=CUSTOM' ) # Read migrations folder migrations = read_migrations ( os . path . join ( os . getcwd (), 'migrations/**/*' )) print ( f 'migrations: {migrations} ' ) if migrations : # apply migration with backend . lock (): backend . apply_migrations ( backend . to_apply ( migrations )) Management table \u00b6 This tool create in your default schema: a log table: 'yoyo_log' a lock_table: 'yoyo_lock' a version table: 'yoyo_version' a migration table: 'yoyo_migration' Migration script template \u00b6 \"\"\" {message} \"\"\" from yoyo import step __depends__ = {{{ depends }}} steps = [ step ( \"create ...\" , \"drop ...\" ) ] License \u00b6 The MIT License (MIT) Contributing \u00b6 See Contributing Next step \u00b6 production usage in order to see how this tool made the job more documentation in code purpose few change in 'yoyo' like set all SQL command on Backend class ...","title":"Home"},{"location":"#yoyo-indexima","text":"Versions following Semantic Versioning","title":"yoyo-indexima"},{"location":"#overview","text":"Indexima migration schema based on yoyo and pyhive . The little story In the land of database migration tool, i have tried: flyway liquidbase with hive extention Both either did not support hive (as flyway), or indexima did not fully compliant with hive (wich cause probleme with liquidbase) So I try to found a module not too complex in order to migrate our indexima schema in a safe way. In this early release, I just trying to do the job.","title":"Overview"},{"location":"#setup","text":"","title":"Setup"},{"location":"#requirements","text":"Python 3.7+","title":"Requirements"},{"location":"#installation","text":"Install this library directly into an activated virtual environment: $ pip install yoyo-indexima or add it to your Poetry project: $ poetry add yoyo-indexima","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#hive-connection","text":"backend ui must start with indexima:// If you have trouble to obtain an hive connection, please read http://dwgeek.com/guide-connecting-hiveserver2-using-python-pyhive.html/ Note: If you using python in docker, you should install : apt-get update -qq apt-get install -qqy gcc libsasl2-dev libsasl2-2 libsasl2-modules-gssapi-mit","title":"Hive connection"},{"location":"#migration","text":"You could see a complete sample under 'example' folder.","title":"Migration"},{"location":"#using-python-client","text":"yoyo_indexima usage: yoyo_indexima [-h] [-s SOURCE] -u URI {show,apply} example: yoyo_indexima apply -s $(pwd)/example/migrations/ -u \"indexima://admin:super_password@localhost:10000/default\" Commands: show Show migrations apply Apply migrations reapply Reapply migrations rollback Rollback migrations mark Mark migrations as applied, without running them unmark Unmark applied migrations, without rolling them back break-lock Break migration locks Help for apply: > yoyo_indexima apply -h usage: yoyo_indexima apply [ -h ] [ -s SOURCE ] -u URI [ -f ] [ -a ] [ -r REVISION ] [ -d ] optional arguments: -h, --help show this help message and exit -s SOURCE, --source SOURCE source path of migration script ( default ./migrations ) -u URI, --uri URI backend uri -f, --force Force apply/rollback of steps even if previous steps have failed -a, --all Select all migrations, regardless of whether they have been previously applied -r REVISION, --revision REVISION Apply/rollback migration with id REVISION -d, --dry-run Dry run: no modification will be applied","title":"using python client"},{"location":"#within-python-code","text":"If your migrations script are under directory migration folder import os from yoyo_indexima import get_backend , read_migrations if __name__ == \"__main__\" : # obtain IndeximaBackend backend = get_backend ( 'indexima://admin:super_password@localhost:10000/default?auth=CUSTOM' ) # Read migrations folder migrations = read_migrations ( os . path . join ( os . getcwd (), 'migrations/**/*' )) print ( f 'migrations: {migrations} ' ) if migrations : # apply migration with backend . lock (): backend . apply_migrations ( backend . to_apply ( migrations ))","title":"within python code"},{"location":"#management-table","text":"This tool create in your default schema: a log table: 'yoyo_log' a lock_table: 'yoyo_lock' a version table: 'yoyo_version' a migration table: 'yoyo_migration'","title":"Management table"},{"location":"#migration-script-template","text":"\"\"\" {message} \"\"\" from yoyo import step __depends__ = {{{ depends }}} steps = [ step ( \"create ...\" , \"drop ...\" ) ]","title":"Migration script template"},{"location":"#license","text":"The MIT License (MIT)","title":"License"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#next-step","text":"production usage in order to see how this tool made the job more documentation in code purpose few change in 'yoyo' like set all SQL command on Backend class ...","title":"Next step"},{"location":"changelog/","text":"0.1.0 (2019-12-2) \u00b6 fix indexima Timestamp column format add mypi typing complete documentation and fix typo use inner get_backend function in cli use python3 template String in tool migration script show glob pattern usage refactorisation of internal migration (avoid change internal module state) align source tree to yoyo project add '--force' command option add '--all' command option rewrote cli parser add rollback, mark, unmark, breaklock command add 'dry-run' mode 0.0.1 (2019-11-19) \u00b6 initial project structure based on geronimo-iia/template-python adding initial dependencies create IndeximaBackend backend rewrote internal migration hook datetime to timestamp hook yoyo with register_indexima hook defauly migratin table adding cli tool","title":"Release Notes"},{"location":"changelog/#010-2019-12-2","text":"fix indexima Timestamp column format add mypi typing complete documentation and fix typo use inner get_backend function in cli use python3 template String in tool migration script show glob pattern usage refactorisation of internal migration (avoid change internal module state) align source tree to yoyo project add '--force' command option add '--all' command option rewrote cli parser add rollback, mark, unmark, breaklock command add 'dry-run' mode","title":"0.1.0 (2019-12-2)"},{"location":"changelog/#001-2019-11-19","text":"initial project structure based on geronimo-iia/template-python adding initial dependencies create IndeximaBackend backend rewrote internal migration hook datetime to timestamp hook yoyo with register_indexima hook defauly migratin table adding cli tool","title":"0.0.1 (2019-11-19)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00b6 This project is based on Geronimo-iaa's Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. Setup \u00b6 Requirements \u00b6 Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Pyenv will manage all our python version. Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 Poetry: https://poetry.eustace.io/docs/#installation Poetry will manage our dependencies and create our virtual environment for us. Graphviz: macOS: $ brew install graphviz Linux: https://graphviz.org/download Windows: https://graphviz.org/download Needed to generate UML documentation To confirm these system dependencies are configured correctly: $ make doctor Installation \u00b6 Install project dependencies into a virtual environment: $ make install Note: - this target create a dummy file .install . The makefile rule depends on pyproject.toml and poetry.lock file - if for whatever reason, you have to force installation, just remove this .install file and execute a make install Development Tasks \u00b6 Manual \u00b6 Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs Automatic \u00b6 Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier . Integration With Visual Studio Code \u00b6 Even if we use fabulous tool like pyenv, poetry, ... at the end, we just want to go on, and code. So here, few detail of my installation. .bashrc # init pyenv with default python version if command -v pyenv 1 >/dev/null 2 > & 1 ; then eval \" $( pyenv init - ) \" fi # add poetry in path export PATH = \" $HOME /.poetry/bin: $PATH \" # Add Visual Studio Code (code) export PATH = \" $PATH :/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" poetry configuration: all is let with default settings.virtualenvs.create = true settings.virtualenvs.in-project = false settings.virtualenvs.path = \"/Users/xxxx/Library/Caches/pypoetry/virtualenvs\" repositories = {} As now, i cannot have a working system with 'settings.virtualenvs.in-project' set to true or 'settings.virtualenvs.path' setted with a custom path. How Launch Visual Studio Code within virtual environment created by poetry ? After do a make install , you have to do: poetry shell code . poetry shell will activate project virtual environment. Continuous Integration \u00b6 The CI server will report overall build status: $ make ci Release Tasks \u00b6 Release to PyPI: $ make upload","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is based on Geronimo-iaa's Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks.","title":"Contributing"},{"location":"contributing/#setup","text":"","title":"Setup"},{"location":"contributing/#requirements","text":"Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Pyenv will manage all our python version. Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 Poetry: https://poetry.eustace.io/docs/#installation Poetry will manage our dependencies and create our virtual environment for us. Graphviz: macOS: $ brew install graphviz Linux: https://graphviz.org/download Windows: https://graphviz.org/download Needed to generate UML documentation To confirm these system dependencies are configured correctly: $ make doctor","title":"Requirements"},{"location":"contributing/#installation","text":"Install project dependencies into a virtual environment: $ make install Note: - this target create a dummy file .install . The makefile rule depends on pyproject.toml and poetry.lock file - if for whatever reason, you have to force installation, just remove this .install file and execute a make install","title":"Installation"},{"location":"contributing/#development-tasks","text":"","title":"Development Tasks"},{"location":"contributing/#manual","text":"Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs","title":"Manual"},{"location":"contributing/#automatic","text":"Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier .","title":"Automatic"},{"location":"contributing/#integration-with-visual-studio-code","text":"Even if we use fabulous tool like pyenv, poetry, ... at the end, we just want to go on, and code. So here, few detail of my installation. .bashrc # init pyenv with default python version if command -v pyenv 1 >/dev/null 2 > & 1 ; then eval \" $( pyenv init - ) \" fi # add poetry in path export PATH = \" $HOME /.poetry/bin: $PATH \" # Add Visual Studio Code (code) export PATH = \" $PATH :/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" poetry configuration: all is let with default settings.virtualenvs.create = true settings.virtualenvs.in-project = false settings.virtualenvs.path = \"/Users/xxxx/Library/Caches/pypoetry/virtualenvs\" repositories = {} As now, i cannot have a working system with 'settings.virtualenvs.in-project' set to true or 'settings.virtualenvs.path' setted with a custom path. How Launch Visual Studio Code within virtual environment created by poetry ? After do a make install , you have to do: poetry shell code . poetry shell will activate project virtual environment.","title":"Integration With Visual Studio Code"},{"location":"contributing/#continuous-integration","text":"The CI server will report overall build status: $ make ci","title":"Continuous Integration"},{"location":"contributing/#release-tasks","text":"Release to PyPI: $ make upload","title":"Release Tasks"},{"location":"documentation/","text":"Documentation \u00b6 Note on documentation generation. Tooling \u00b6 mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram Documentation folder \u00b6 under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool Makefile targets \u00b6 Main target: 'docs' call 'mkdocs-site': call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with github page project Cleaning target: '.clean-docs' - Remove all temp files Extract from Makefile \u00b6 DOCS_PATH := mkdocs/docs SITE_PATH := mkdocs/site MK_FILES = $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md mkdocs-md: $(MK_FILES) # Copy standard document $(DOCS_PATH)/index.md: README.md @ cp -f README.md $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md: LICENSE.md @ cp -f LICENSE.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md: CHANGELOG.md @ cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md: CODE_OF_CONDUCT.md @ cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs/mkdocs.yml mkdocs-md ## Build Documentation Site @ cd mkdocs; \\ $(RUN) mkdocs build @ rm -rf docs/ @ mv mkdocs/site docs/ .clean-docs: ## remove all generated files @ rm -rf mkdocs/site @ rm -rf $(DOCS_PATH)/uml @ rm -rf $(DOCS_PATH)/api @ rm -rf $(DOCS_PATH)/index.md @ rm -rf $(DOCS_PATH)/license.md @ rm -rf $(DOCS_PATH)/changelog.md @ rm -rf $(DOCS_PATH)/code_of_conduct.md docs: mkdocs-site ## Generate documentation and UML","title":"Documentation"},{"location":"documentation/#documentation","text":"Note on documentation generation.","title":"Documentation"},{"location":"documentation/#tooling","text":"mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram","title":"Tooling"},{"location":"documentation/#documentation-folder","text":"under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool","title":"Documentation folder"},{"location":"documentation/#makefile-targets","text":"Main target: 'docs' call 'mkdocs-site': call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with github page project Cleaning target: '.clean-docs' - Remove all temp files","title":"Makefile targets"},{"location":"documentation/#extract-from-makefile","text":"DOCS_PATH := mkdocs/docs SITE_PATH := mkdocs/site MK_FILES = $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md mkdocs-md: $(MK_FILES) # Copy standard document $(DOCS_PATH)/index.md: README.md @ cp -f README.md $(DOCS_PATH)/index.md $(DOCS_PATH)/license.md: LICENSE.md @ cp -f LICENSE.md $(DOCS_PATH)/license.md $(DOCS_PATH)/changelog.md: CHANGELOG.md @ cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md $(DOCS_PATH)/code_of_conduct.md: CODE_OF_CONDUCT.md @ cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs/mkdocs.yml mkdocs-md ## Build Documentation Site @ cd mkdocs; \\ $(RUN) mkdocs build @ rm -rf docs/ @ mv mkdocs/site docs/ .clean-docs: ## remove all generated files @ rm -rf mkdocs/site @ rm -rf $(DOCS_PATH)/uml @ rm -rf $(DOCS_PATH)/api @ rm -rf $(DOCS_PATH)/index.md @ rm -rf $(DOCS_PATH)/license.md @ rm -rf $(DOCS_PATH)/changelog.md @ rm -rf $(DOCS_PATH)/code_of_conduct.md docs: mkdocs-site ## Generate documentation and UML","title":"Extract from Makefile"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}